"""Resync migrations

Revision ID: 8abcc4ce829c
Revises: 
Create Date: 2024-12-08 19:06:26.747899

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '8abcc4ce829c'
down_revision = None
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('bookings')
    op.drop_table('users')
    op.drop_table('products')
    op.drop_table('notifications')
    op.drop_table('reviews')
    with op.batch_alter_table('Booking', schema=None) as batch_op:
        batch_op.alter_column('BookingID',
               existing_type=sa.BIGINT(),
               server_default=None,
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('personsBooked',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=True,
               existing_server_default=sa.text("'0'::bigint"))
        batch_op.alter_column('commissionfee',
               existing_type=sa.BIGINT(),
               type_=sa.Float(),
               nullable=False)
        batch_op.alter_column('listingID',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
        batch_op.alter_column('buyerID',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
        batch_op.drop_column('created_at')
        batch_op.drop_column('status')

    with op.batch_alter_table('Notification', schema=None) as batch_op:
        batch_op.alter_column('notificationID',
               existing_type=sa.BIGINT(),
               server_default=None,
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('receiverID',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
        batch_op.drop_column('created_at')

    with op.batch_alter_table('Product', schema=None) as batch_op:
        batch_op.alter_column('listingID',
               existing_type=sa.BIGINT(),
               server_default=None,
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('providerID',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
        batch_op.drop_column('created_at')

    with op.batch_alter_table('Review', schema=None) as batch_op:
        batch_op.alter_column('reviewID',
               existing_type=sa.BIGINT(),
               server_default=None,
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.alter_column('score',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
        batch_op.alter_column('buyerID',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
        batch_op.alter_column('BookingID',
               existing_type=sa.BIGINT(),
               type_=sa.Integer(),
               existing_nullable=False)
        batch_op.drop_constraint('Review_reviewID_key', type_='unique')
        batch_op.drop_table_comment(
        existing_comment='review geven aan een booking door een user'
    )
        batch_op.drop_column('created_at')

    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.alter_column('userID',
               existing_type=sa.BIGINT(),
               server_default=None,
               type_=sa.Integer(),
               existing_nullable=False,
               autoincrement=True)
        batch_op.drop_constraint('User_id_key', type_='unique')
        batch_op.drop_constraint('User_userName_key', type_='unique')
        batch_op.drop_column('created_at')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('User', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
        batch_op.create_unique_constraint('User_userName_key', ['userName'])
        batch_op.create_unique_constraint('User_id_key', ['userID'])
        batch_op.alter_column('userID',
               existing_type=sa.Integer(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('Review', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
        batch_op.create_table_comment(
        'review geven aan een booking door een user',
        existing_comment=None
    )
        batch_op.create_unique_constraint('Review_reviewID_key', ['reviewID'])
        batch_op.alter_column('BookingID',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('buyerID',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('score',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('reviewID',
               existing_type=sa.Integer(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('Product', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
        batch_op.alter_column('providerID',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('listingID',
               existing_type=sa.Integer(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('Notification', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
        batch_op.alter_column('receiverID',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('notificationID',
               existing_type=sa.Integer(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    with op.batch_alter_table('Booking', schema=None) as batch_op:
        batch_op.add_column(sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False))
        batch_op.add_column(sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False))
        batch_op.alter_column('buyerID',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('listingID',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=False)
        batch_op.alter_column('commissionfee',
               existing_type=sa.Float(),
               type_=sa.BIGINT(),
               nullable=True)
        batch_op.alter_column('personsBooked',
               existing_type=sa.Integer(),
               type_=sa.BIGINT(),
               existing_nullable=True,
               existing_server_default=sa.text("'0'::bigint"))
        batch_op.alter_column('BookingID',
               existing_type=sa.Integer(),
               server_default=sa.Identity(always=False, start=1, increment=1, minvalue=1, maxvalue=9223372036854775807, cycle=False, cache=1),
               type_=sa.BIGINT(),
               existing_nullable=False,
               autoincrement=True)

    op.create_table('reviews',
    sa.Column('reviewID', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('score', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('buyerID', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('BookingID', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['BookingID'], ['bookings.BookingID'], name='reviews_BookingID_fkey'),
    sa.ForeignKeyConstraint(['buyerID'], ['users.userID'], name='reviews_buyerID_fkey'),
    sa.PrimaryKeyConstraint('reviewID', name='reviews_pkey')
    )
    op.create_table('notifications',
    sa.Column('notificationID', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('viewed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('receiverID', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['receiverID'], ['users.userID'], name='notifications_receiverID_fkey'),
    sa.PrimaryKeyConstraint('notificationID', name='notifications_pkey')
    )
    op.create_table('products',
    sa.Column('listingID', sa.INTEGER(), server_default=sa.text('nextval(\'"products_listingID_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('picture', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('providerID', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('available_calendar', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['providerID'], ['users.userID'], name='products_providerID_fkey'),
    sa.PrimaryKeyConstraint('listingID', name='products_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('users',
    sa.Column('userID', sa.INTEGER(), server_default=sa.text('nextval(\'"users_userID_seq"\'::regclass)'), autoincrement=True, nullable=False),
    sa.Column('userName', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('authID', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('userID', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('bookings',
    sa.Column('BookingID', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('personsBooked', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('time', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('commissionFee', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('listingID', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('buyerID', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('booked_calendar', sa.TEXT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['buyerID'], ['users.userID'], name='bookings_buyerID_fkey'),
    sa.ForeignKeyConstraint(['listingID'], ['products.listingID'], name='bookings_listingID_fkey'),
    sa.PrimaryKeyConstraint('BookingID', name='bookings_pkey')
    )
    # ### end Alembic commands ###
